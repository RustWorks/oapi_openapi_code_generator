{{~#if operationId}}
pub mod {{snakecase operationId}} {
    use super::components;
    use serde::{Deserialize, Serialize};

    {{#each parameters}}
        {{~>subtypes name=name}}
    {{~/each}}
    /// Parameters for {{snakecase operationId}} operation
    #[derive(Deserialize)]
    pub struct Parameters {
    {{~#each parameters}}
        {{#if description}}/// {{description}}{{/if}}
        pub {{snakecase name}}: {{>data_type name=name required=required schema}},
    {{~/each}}
    {{~#with requestBody.content.[application/json]}}
        pub body: Body,
    {{~/with}}
    }

    impl Parameters {
        {{~#if requestBody}}
        pub fn new(query: Query, path: Path, body: Body) -> Self {
        {{~else}}
        pub fn new(query: Query, path: Path) -> Self {
        {{~/if}}
            Self {
            {{~#each parameters}}
                {{snakecase name}}:
                    {{~#if (eq in "query")}} query.{{snakecase name}}, {{~/if}}
                    {{~#if (eq in "path")}} path.{{snakecase name}}, {{~/if}}
            {{~/each}}
            {{~#with requestBody.content.[application/json]}}
                body
            {{~/with}}
            }
        }

        pub fn query(&self) -> Query {
            Query {
            {{~#each parameters}}
                {{~#if (eq in "query")}}{{snakecase name}}: self.{{snakecase name}}.clone(),{{~/if}}
            {{~/each}}
            }
        }

        pub fn path(&self) -> Path {
            Path {
            {{~#each parameters}}
                {{~#if (eq in "path")}}{{snakecase name}}: self.{{snakecase name}}.clone(),{{~/if}}
            {{~/each}}
            }
        }

        {{#with requestBody.content.[application/json]}}
        pub fn body(&self) -> Body {
            self.body.clone()
        }
        {{~/with}}
    }

    {{>parameter_type type="query"}}

    {{>parameter_type type="path"}}

    {{#with requestBody}}
    {{>schema name="Body" description=description content.[application/json].schema}}
    {{~/with}}

    #[derive(Debug)]
    pub enum Response<T> {
    {{~#each responses}}
        {{~#if (not (eq @key "default"))}}
        {{camelcase "Response" @key}}({{camelcase "Response" @key}}),
        {{~/if}}
    {{~/each}}
        Unspecified(T),
    }
    {{~#each responses}}
        {{~#if (not (eq @key "default"))}}
            {{>schema name=(camelcase "Response" @key) description=description content.[application/json].schema}}
        {{~/if}}
    {{~/each}}
}
{{/if}}