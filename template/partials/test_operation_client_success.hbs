#[test]
fn test_{{snakecase request.operationId}}_{{status}}() {
  let api_client = Client::new(&mockito::server_url());
  let uri = format!("{{@../../key}}"
    {{~#each request.parameters}}
      {{~#if (eq in "path")}}, {{name}} = {{>example}}{{/if}}
    {{~/each~}}
  );
  let mock = mock("{{shoutysnakecase request.operation_verb}}", Matcher::Exact(uri))
    .match_query(Matcher::AllOf(vec![
      {{~#each request.parameters}}
        {{~#if (eq in "query")}}
        Matcher::UrlEncoded("{{name}}".into(), ({{>example}}).serialize().unwrap()),
        {{~/if}}
      {{~/each~}}
    ]))
    .with_status({{status}})
    {{~#with content.[application/json]}}
    .with_body(serde_json::to_string(&{{>example}}).unwrap())
    {{~/with}}
    .create();
  let parameters = {{snakecase request.operationId}}::Parameters {
    {{~#each request.parameters}}
      {{~#if (eq in "path")}}
      {{name}}: {{>example}},
      {{~/if}}
      {{~#if (eq in "query")}}
      {{name}}: {{>example}},
      {{~/if}}
    {{~/each~}}
    {{#with request.requestBody.content.[application/json]}}
      body: {{>example}},
    {{~/with}}
  };
  let result = api_client.{{snakecase request.operationId}}(&parameters).unwrap();
  mock.assert();
}