{{!-- https://swagger.io/docs/specification/adding-examples/ --}}
{{~>subtypes_example name=name}}

const {{shoutysnakecase name suffix}}_EXAMPLE: Option<{{camelcase name suffix}}> =
    {{~#if properties}}
        Some({{camelcase name suffix}} {
        {{~#each properties}}
            {{~#if (eq type "object")}}
            {{sanitize (snakecase @key)}}: {{(shoutysnakecase ../name @key)}}_EXAMPLE,
            {{~/if}}
            {{~#if (eq type "array")}}
            {{~#if (eq items.type "object")}}
            {{sanitize (snakecase @key)}}: vec![{{(shoutysnakecase ../name @key)}}_EXAMPLE],
            {{/if}}
            {{~/if}}
            {{~#if (and (not (eq type "object")) (not (eq type "array")))}}
            {{sanitize (snakecase @key)}}: {{> example schema=this}},
            {{~/if}}
        {{~/each}}
        })
    {{~else~}}
        None
    {{~/if}}
;

{{!-- impl Example for {{camelcase name suffix}} {
    fn example() -> Option<{{camelcase name suffix}}> {
        {{#if type~}}
            {{~#if example}}
                let {{snakecase name suffix}}: &str = r#"{{json example}}"#;
                Some(serde_json::from_str({{snakecase name suffix}}).unwrap())
            {{~else~}}
                {{~#if properties}}
                    let {{snakecase name suffix}}: String = json!({
                    {{~#each properties}}
                        {{~#if (eq type "object")}}
                        "{{snakecase @key}}": {{(camelcase ../name @key)}}::example(),
                        {{~/if}}
                        {{~#if (eq type "array")}}
                        {{~#if (eq items.type "object")}}
                        "{{snakecase @key}}": vec![{{(camelcase ../name @key)}}::example()],
                        {{/if}}
                        {{~/if}}
                        {{~#if (and (not (eq type "object")) (not (eq type "array")))}}
                        "{{snakecase @key}}": {{> example schema=this}},
                        {{~/if}}
                    {{~/each}}
                    }).to_string();
                    Some(serde_json::from_str(&{{snakecase name suffix}}).unwrap())
                {{~else~}}
                    None
                {{~/if}}
            {{~/if}}
        {{~else~}}
            None
        {{~/if}}
    }
} --}}