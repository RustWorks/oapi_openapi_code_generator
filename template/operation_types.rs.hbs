{{~#if operationId}}
pub mod {{snakecase operationId}} {
    use actix_web::HttpResponse;
    use serde::{Deserialize, Serialize};
    {{#each parameters}}
        {{~>subtypes name=name}}
    {{~/each}}

    {{~#if parameters}}
    /// Parameters for {{snakecase operationId}} operation
    #[derive(Deserialize)]
    pub struct Parameters {
    {{~#each parameters}}
        {{#if description}}/// {{description}}{{/if}}
        pub {{snakecase name}}: {{>data_type name=name required=required schema}},
    {{~/each}}
    }

    impl Parameters {
        pub fn new(query: Query, path: Path) -> Self {
            Self {
            {{~#each parameters}}
                {{snakecase name}}:
                    {{~#if (eq in "query")}} query.{{snakecase name}} {{~/if}}
                    {{~#if (eq in "path")}} path.{{snakecase name}} {{~/if}}
            {{~/each}}
            }
        }
    }

    {{>parameter_type type="query"}}

    {{>parameter_type type="path"}}

    {{~/if}}

    #[derive(Serialize)]
    pub enum Response {
    {{~#each responses}}
        {{~#if (not (eq @key "default"))}}
        {{camelcase "Response" @key}}({{camelcase "Response" @key}}),
        {{~/if}}
    {{~/each}}
        Unspecified(HttpResponse),
    }

    {{#each responses}}
        {{~#if (not (eq @key "default"))}}
        {{~>schema name=(camelcase "Response" @key) description=description content.[application/json].schema}}
        {{~/if}}
    {{/each}}
}
{{/if}}